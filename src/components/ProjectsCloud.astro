---
import { Icon } from 'astro-icon/components'
interface IconItem { title: string; icon?: string; iconName?: string; slug: string }
interface Props { icons: Array<{ data: any; slug: string }>; onLabel?: string }
const { icons, onLabel = 'Apps' } = Astro.props as Props;
const items: IconItem[] = icons.map((p) => ({ title: p.data.title, icon: p.data.icon, iconName: p.data.iconName, slug: p.slug }));

// Compute stable positions filling a soft elliptical "cloud" with spacing.
const centerX = 50; // percent
const centerY = 18; // percent (top band)
const rx = 38; // x-radius in percent (wider for spacing)
const ry = 20; // y-radius in percent
const minDist = 9; // minimum distance between icons in percent units
function fract(n: number) { return n - Math.floor(n); }
function rand01(seed: number) { return fract(Math.sin(seed * 12.9898 + 78.233) * 43758.5453); }
function tryPlace(seed: number, placed: Array<{x:number;y:number}>): {x:number;y:number} {
  // polar sample with radius bias to fill interior, then squash to ellipse
  for (let t = 0; t < 200; t++) {
    const a = rand01(seed + t) * Math.PI * 2;
    const r = Math.sqrt(rand01(seed + t + 0.5)); // bias toward center
    let x = centerX + Math.cos(a) * rx * r;
    let y = centerY + Math.sin(a) * ry * r;
    // clamp softly inside container bounds
    x = Math.min(94, Math.max(6, x));
    y = Math.min(40, Math.max(4, y));
    let ok = true;
    for (const p of placed) {
      const dx = x - p.x; const dy = y - p.y;
      if (Math.hypot(dx, dy) < minDist) { ok = false; break; }
    }
    if (ok) return { x, y };
  }
  // fallback: place on outer rim
  const a = rand01(seed) * Math.PI * 2;
  return { x: centerX + Math.cos(a) * rx, y: centerY + Math.sin(a) * ry };
}
const placed: Array<{x:number;y:number}> = [];
const positions = items.map((_, i) => {
  const pos = tryPlace(i + 1, placed); placed.push(pos);
  const anim = i % 3 === 0 ? 'driftA' : i % 3 === 1 ? 'driftB' : 'driftC';
  const delay = (i % 7) * 0.25;
  const dur = 24 + (i % 5) * 4;
  return { left: pos.x, top: pos.y, anim, delay, dur };
});
---
<style>
  .cloudWrap { position: relative; margin: 3rem auto 1rem; max-width: 1100px; padding: 1.25rem; z-index: 3; }
  .titleRow { display: flex; align-items: center; justify-content: center; gap: .5rem; }
  .title { color: var(--white); font-weight: 700; letter-spacing: .04em; }
  .cluster {
    position: relative; margin-top: .75rem; border: none;
    border-radius: 20px; padding: 0; background: transparent;
  }
  .chevron { width: 18px; height: 18px; opacity: .8; transform: translateY(2px); }

  .icons { position: relative; min-height: 260px; }
  .icon {
    position: absolute;
    width: 56px; height: 56px;
    padding: 6px;
    border-radius: 14px;
    background: rgba(255,255,255,0.06);
    border: 1px solid rgba(255,255,255,0.14);
    box-shadow: 0 6px 18px rgba(0,0,0,.35);
    display: inline-flex; align-items: center; justify-content: center;
    backdrop-filter: blur(2px);
  }
  .icon img, .icon svg, .icon canvas { width: 100%; height: 100%; border-radius: 10px; display: block; }

  @keyframes driftA { 0%,100%{ transform: translate(0,0) } 50%{ transform: translate(6px,-8px) rotate(2deg) } }
  @keyframes driftB { 0%,100%{ transform: translate(0,0) } 50%{ transform: translate(-6px,6px) rotate(-2deg) } }
  @keyframes driftC { 0%,100%{ transform: translate(0,0) } 50%{ transform: translate(4px,-4px) rotate(1deg) } }
  @media (prefers-reduced-motion: reduce) { .icon { animation: none !important; } }

  .hint { text-align: center; margin-top: .5rem; color: var(--lavender); opacity: .9; font-size: .95rem; display: flex; align-items: center; justify-content: center; gap: .45rem; }
</style>

<div class="cloudWrap">
  <div class="cluster">
    <div class="icons" aria-label="App icons">
      {items.map((it, i) => {
        const p = positions[i];
        const style = `left:${p.left}%; top:${p.top}%; animation:${p.anim} ${p.dur}s ease-in-out ${p.delay}s infinite;`;
        if (it.icon) {
          return <span class="icon" style={style} title={it.title}><img src={it.icon} alt={it.title} /></span>;
        }
        if (it.iconName) {
          return <span class="icon" style={style} title={it.title}><Icon name={it.iconName} width="56" height="56" /></span>;
        }
        return <span class="icon" style={style} title={it.title}></span>;
      })}
    </div>
    
  </div>
</div>


