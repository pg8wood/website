---
import { Icon } from 'astro-icon/components'
interface IconItem { title: string; icon?: string; iconName?: string; slug: string }
interface Props { icons: Array<{ data: any; slug: string }>; onLabel?: string }
const { icons, onLabel = 'Apps' } = Astro.props as Props;
const items: IconItem[] = icons.map((p) => ({ title: p.data.title, icon: p.data.icon, iconName: p.data.iconName, slug: p.slug }));

// Compute stable positions for all icons so we don't rely on nth-child rules.
const centerX = 50; // percent
const centerY = 18; // percent (a band near top of cluster)
function fract(n: number) { return n - Math.floor(n); }
function rand01(i: number) { return fract(Math.sin(i * 12.9898 + 78.233) * 43758.5453); }
const positions = items.map((_, i) => {
  const angle = (Math.PI * 2 * i) / Math.max(items.length, 6);
  const radius = 12 + rand01(i) * 18; // 12%..30%
  let left = centerX + Math.cos(angle) * radius;
  let top = centerY + Math.sin(angle) * radius * 0.6; // squashed vertically
  // small jitter to avoid perfect symmetry
  left += (rand01(i + 1) - 0.5) * 4;
  top += (rand01(i + 2) - 0.5) * 3;
  // clamp
  left = Math.min(92, Math.max(8, left));
  top = Math.min(36, Math.max(6, top));
  const anim = i % 3 === 0 ? 'driftA' : i % 3 === 1 ? 'driftB' : 'driftC';
  const delay = (i % 7) * 0.25;
  const dur = 22 + (i % 5) * 3;
  return { left, top, anim, delay, dur };
});
---
<style>
  .cloudWrap { position: relative; margin: 3rem auto 1rem; max-width: 960px; padding: 1.25rem; }
  .titleRow { display: flex; align-items: center; justify-content: center; gap: .5rem; }
  .title { color: var(--white); font-weight: 700; letter-spacing: .04em; }
  .cluster {
    position: relative; margin-top: .75rem; border: 1px dashed rgba(255,255,255,.25);
    border-radius: 20px; padding: 1.25rem; background: rgba(255,255,255,0.03);
    transition: border-color .2s ease, background .2s ease;
  }
  .cluster:hover { border-color: rgba(255,255,255,.5); background: rgba(255,255,255,0.05); }
  .chevron { width: 18px; height: 18px; opacity: .8; transform: translateY(2px); }

  .icons { position: relative; min-height: 200px; }
  .icon {
    position: absolute;
    width: 56px; height: 56px;
    padding: 6px;
    border-radius: 14px;
    background: rgba(255,255,255,0.06);
    border: 1px solid rgba(255,255,255,0.14);
    box-shadow: 0 6px 18px rgba(0,0,0,.35);
    display: inline-flex; align-items: center; justify-content: center;
    backdrop-filter: blur(2px);
  }
  .icon img, .icon svg, .icon canvas { width: 100%; height: 100%; border-radius: 10px; display: block; }

  @keyframes driftA { 0%,100%{ transform: translate(0,0) } 50%{ transform: translate(6px,-8px) rotate(2deg) } }
  @keyframes driftB { 0%,100%{ transform: translate(0,0) } 50%{ transform: translate(-6px,6px) rotate(-2deg) } }
  @keyframes driftC { 0%,100%{ transform: translate(0,0) } 50%{ transform: translate(4px,-4px) rotate(1deg) } }
  @media (prefers-reduced-motion: reduce) { .icon { animation: none !important; } }

  .hint { text-align: center; margin-top: .5rem; color: var(--lavender); opacity: .9; font-size: .95rem; display: flex; align-items: center; justify-content: center; gap: .45rem; }
</style>

<div class="cloudWrap">
  <div class="titleRow">
    <h2 class="title">{onLabel}</h2>
  </div>
  <div class="cluster">
    <div class="icons" aria-label="App icons">
      {items.map((it, i) => {
        const p = positions[i];
        const style = `left:${p.left}%; top:${p.top}%; animation:${p.anim} ${p.dur}s ease-in-out ${p.delay}s infinite;`;
        if (it.icon) {
          return <span class="icon" style={style} title={it.title}><img src={it.icon} alt={it.title} /></span>;
        }
        if (it.iconName) {
          return <span class="icon" style={style} title={it.title}><Icon name={it.iconName} width="56" height="56" /></span>;
        }
        return <span class="icon" style={style} title={it.title}></span>;
      })}
    </div>
    <div class="hint">Hover to expand <svg class="chevron" viewBox="0 0 24 24" aria-hidden="true"><path fill="currentColor" d="M6.7 8.3 12 13.6l5.3-5.3 1.4 1.4-6.7 6.7-6.7-6.7z"/></svg></div>
  </div>
</div>


