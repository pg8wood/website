---
const width = 1920;
const height = 1080;
function rand(min: number, max: number) {
  return Math.random() * (max - min) + min;
}
function biased01(edgeBias = 0.35) {
  return Math.random() < 0.5
    ? Math.pow(Math.random(), 1 + edgeBias)
    : 1 - Math.pow(Math.random(), 1 + edgeBias);
}
function makeStars(count: number, rMin: number, rMax: number) {
  return Array.from({ length: count }).map((_, i) => {
    const bx = biased01(0.35);
    const by = biased01(0.35);
    const r = rand(rMin, rMax);
    const delay = rand(0, 8);
    const dur = rand(2.3, 6.2);
    const opacity = rand(0.5, 1);
    return { id: i, cx: bx * width, cy: by * height, r, delay, dur, opacity };
  });
}
// Multi-layer parallax starfield
const starsNear = makeStars(120, 1.0, 1.6);
const starsMid = makeStars(140, 0.8, 1.3);
const starsFar = makeStars(100, 0.6, 1.1);
---
<style>
  .twinkle {
    animation-name: twinkle;
    animation-iteration-count: infinite;
    animation-direction: alternate;
    animation-timing-function: ease-in-out;
  }

  @keyframes twinkle {
    0% { opacity: 0.4; }
    100% { opacity: 1; }
  }

  .drift-base { position: absolute; inset: 0; transform: translate3d(0,0,0); }
  .drift-l1 { animation: drift 34s linear infinite; }
  .drift-l2 { animation: drift 46s linear infinite; }
  .drift-l3 { animation: drift 58s linear infinite; }
  @keyframes drift {
    0% { transform: translate3d(0,0,0); }
    50% { transform: translate3d(-10px, -6px, 0); }
    100% { transform: translate3d(0,0,0); }
  }

  @media (prefers-reduced-motion: reduce) {
    .twinkle, .drift-base, .drift-l1, .drift-l2, .drift-l3 { animation: none !important; }
  }
</style>

<div aria-hidden="true" style="position:fixed; inset:0; overflow:hidden; pointer-events:none; z-index:0;">
  <!-- Near layer -->
  <svg class="drift-base drift-l1" width="100%" height="100%" viewBox={`0 0 ${width} ${height}`} preserveAspectRatio="xMidYMid slice">
    <defs>
      <filter id="starGlow1" x="-50%" y="-50%" width="200%" height="200%">
        <feGaussianBlur stdDeviation="0.9" result="blur" />
        <feMerge>
          <feMergeNode in="blur" />
          <feMergeNode in="SourceGraphic" />
        </feMerge>
      </filter>
    </defs>
    {starsNear.map((s) => (
      <circle cx={s.cx} cy={s.cy} r={s.r} fill="white" opacity={s.opacity} filter="url(#starGlow1)" class="twinkle" style={`animation-duration:${s.dur}s; animation-delay:${s.delay}s;`} />
    ))}
  </svg>

  <!-- Mid layer -->
  <svg class="drift-base drift-l2" width="100%" height="100%" viewBox={`0 0 ${width} ${height}`} preserveAspectRatio="xMidYMid slice">
    <defs>
      <filter id="starGlow2" x="-50%" y="-50%" width="200%" height="200%">
        <feGaussianBlur stdDeviation="0.8" result="blur" />
        <feMerge>
          <feMergeNode in="blur" />
          <feMergeNode in="SourceGraphic" />
        </feMerge>
      </filter>
    </defs>
    {starsMid.map((s) => (
      <circle cx={s.cx} cy={s.cy} r={s.r} fill="white" opacity={s.opacity} filter="url(#starGlow2)" class="twinkle" style={`animation-duration:${s.dur}s; animation-delay:${s.delay}s;`} />
    ))}
  </svg>

  <!-- Far layer -->
  <svg class="drift-base drift-l3" width="100%" height="100%" viewBox={`0 0 ${width} ${height}`} preserveAspectRatio="xMidYMid slice">
    <defs>
      <filter id="starGlow3" x="-50%" y="-50%" width="200%" height="200%">
        <feGaussianBlur stdDeviation="0.7" result="blur" />
        <feMerge>
          <feMergeNode in="blur" />
          <feMergeNode in="SourceGraphic" />
        </feMerge>
      </filter>
    </defs>
    {starsFar.map((s) => (
      <circle cx={s.cx} cy={s.cy} r={s.r} fill="white" opacity={s.opacity} filter="url(#starGlow3)" class="twinkle" style={`animation-duration:${s.dur}s; animation-delay:${s.delay}s;`} />
    ))}
  </svg>

  <!-- remove vignette for full-bleed stars into safe areas -->
</div>

