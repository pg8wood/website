---
import { Icon } from 'astro-icon/components'
interface Props { project: any }
const { project } = Astro.props as Props;
const d = project.data;
const isFeatured = !!d.featured;
let Content: any = null;
if (isFeatured && typeof project.render === 'function') {
  const rendered = await project.render();
  Content = rendered.Content;
}
---
<style>
  .card { border: 1px solid rgba(255,255,255,0.12); border-radius: 12px; padding: 1rem; background: rgba(255,255,255,0.02); }
  .card.featured { grid-column: span 2; padding: 1.25rem; background: linear-gradient(180deg, rgba(255,255,255,0.03), rgba(255,255,255,0.01)); border-color: rgba(255,255,255,0.18); }
  @media (min-width: 980px) { .card.featured { grid-column: span 3; } }
  .header { display: flex; gap: .75rem; align-items: center; }
  .icon { width: 48px; height: 48px; border-radius: 10px; object-fit: cover; }
  .icon img, .icon svg, .icon canvas { width: 48px; height: 48px; border-radius: 10px; }
  .title { margin: 0; color: var(--white); font-size: 1.2rem; }
  .tagline { margin: .25rem 0 .5rem; color: var(--pale-gray); opacity: .9; }
  .badges { display: flex; flex-wrap: wrap; gap: .4rem; margin-top: .4rem; }
  .badge { border: 1px solid rgba(255,255,255,.15); padding: .2rem .5rem; border-radius: 999px; font-size: .8rem; opacity: .9; }
  .client { margin-left: auto; font-size: .8rem; color: var(--lavender); opacity: .95; }
  .links { margin-top: .75rem; display: flex; gap: .75rem; }
  .link { color: var(--lavender); text-decoration: none; }
  .body { margin-top: .75rem; color: var(--pale-gray); line-height: 1.55; }
  .body a { color: var(--lavender); }
  .body ul { margin: .5rem 0 .5rem 1rem; }
</style>

<article class={isFeatured ? 'card featured' : 'card'}>
  <header class="header">
    {d.iconName ? (
      <span class="icon"><Icon name={d.iconName} width="48" height="48" /></span>
    ) : d.icon ? (
      <img class="icon" src={d.icon} alt={d.title} />
    ) : null}
    <div>
      <h3 class="title">{d.title}</h3>
      <p class="tagline">{d.tagline}</p>
    </div>
    {d.client ? (<span class="client">Client: {d.client}</span>) : null}
  </header>
  {d.badges?.length ? (
    <div class="badges">{d.badges.map((b: string) => <span class="badge">{b}</span>)}</div>
  ) : null}
  <div class="links">
    {d.links?.repo && <a class="link" href={d.links.repo}>Source</a>}
    {d.links?.appStore && <a class="link" href={d.links.appStore}>App Store</a>}
    {d.links?.playStore && <a class="link" href={d.links.playStore}>Play</a>}
    {d.links?.live && <a class="link" href={d.links.live}>Live</a>}
    {d.links?.docs && <a class="link" href={d.links.docs}>Docs</a>}
  </div>
  {isFeatured && Content ? (<div class="body"><Content /></div>) : null}
</article>


