[{
    "title": "ðŸ‘‹ Hello, Hugo!",
    "date": "",
    "description": "Gotta start somewhere.",
    "body": "Welcome! You\u0026rsquo;ve found my first blog post. Hugo is an awesome open-source static site generator with a super active community.\nI\u0026rsquo;ve chosen Hugo as my blog framework so I can learn more about static site generators and post some write-ups of what I\u0026rsquo;m up to without needing to manually create my site or worry about a CMS. As with most blogs, I expect everything on this site to be content-driven, so Hugo is a great fit.\nRight off the bat I can see how flexible this tool is as my site hot-reloads while the Hugo server observes changes in my Markdown. There are a lot of customization options, but I\u0026rsquo;m going to keep it slim until I have my site hosted and building/deploying automatically. I\u0026rsquo;m excited to look back on this hello world post in the future and see how much I\u0026rsquo;ve learned since the time of writing.\nWhat follows will be anything interesting I learned while setting up this blog.\nDynamic Content on a Static Site To be honest, I didn\u0026rsquo;t think about hosting any dynamic content on this statically-generated site until looking over the Hugo Imperfect Slim documentation. This theme ships with an almost-complete setup of Staticman, an engine that transforms user-generated content into data that is committed into source control. From there, I can make sure my site observes my repository and automatically rebuilds when changes are detected in the main branch.\nThe theme ships with a good amount of Staticman boilerplate already abstracted away, but not in a way that locks me into this theme if I ever want to change the look and feel of my blog. I\u0026rsquo;ll definitely be setting it up.\nI\u0026rsquo;m looking for two outcomes from setting up Staticman: learning how to automatically re-deploy my site when changes are pushed to the main branch of GitHub, and creating a feedback channel so that I can interact with the readers of my blog.\nSetting up Staticman Staticman works by hosting a REST API that my static website will consume in order to serve dynamic content. Here\u0026rsquo;s how it works:\n Submitting a comment on my blog sends a POST request with form data to Staticman. Staticman ingests the form data and pushes a commit to my website\u0026rsquo;s repo. If using the moderate comments via PR option, the bot opens a PR; otherwise, it will commit to the repositroy\u0026rsquo;s main branch. A CI/CD pipeline triggers, building and deploying the new static site complete with the new comment. Staticman automatically deletes its PR branch (if using the moderate comments via PR option) using a webhook.  ",
    "ref": "/blog/posts/hello-hugo/"
  }]
